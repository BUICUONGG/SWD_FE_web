import React, { useState } from 'react';
import { Modal, Form, Input, Button, message } from 'antd';
import { LockOutlined } from '@ant-design/icons';

interface ChangePasswordModalProps {
  open: boolean;
  onClose: () => void;
}

const ChangePasswordModal: React.FC<ChangePasswordModalProps> = ({ open, onClose }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (values: any) => {
    try {
      setLoading(true);
      // TODO: Call API to change password
      // const response = await userService.changePassword(values.oldPassword, values.newPassword);
      
      message.success('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
      form.resetFields();
      onClose();
    } catch (error) {
      console.error('Error changing password:', error);
      message.error('ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title="üîê ƒê·ªïi m·∫≠t kh·∫©u"
      open={open}
      onCancel={onClose}
      footer={null}
      centered
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        style={{ marginTop: 24 }}
      >
        <Form.Item
          label="M·∫≠t kh·∫©u c≈©"
          name="oldPassword"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©!' }
          ]}
        >
          <Input.Password prefix={<LockOutlined />} placeholder="Nh·∫≠p m·∫≠t kh·∫©u c≈©" />
        </Form.Item>

        <Form.Item
          label="M·∫≠t kh·∫©u m·ªõi"
          name="newPassword"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!' },
            { min: 6, message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!' }
          ]}
        >
          <Input.Password prefix={<LockOutlined />} placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi" />
        </Form.Item>

        <Form.Item
          label="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
          name="confirmPassword"
          dependencies={['newPassword']}
          rules={[
            { required: true, message: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!' },
            ({ getFieldValue }) => ({
              validator(_, value) {
                if (!value || getFieldValue('newPassword') === value) {
                  return Promise.resolve();
                }
                return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'));
              },
            }),
          ]}
        >
          <Input.Password prefix={<LockOutlined />} placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi" />
        </Form.Item>

        <Form.Item>
          <Button
            type="primary"
            htmlType="submit"
            block
            loading={loading}
          >
            ƒê·ªïi m·∫≠t kh·∫©u
          </Button>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default ChangePasswordModal;
